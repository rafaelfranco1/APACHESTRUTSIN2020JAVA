//47

import java.math.BigDecimal;
import java.io.Serializable;
import java.util.UUID;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.persistence.Id;

@Entity //jakarta persistence
@Table(name = "TB_PRODUCTS") //jakarta persistence
public class ProductModel implements Serializabe { //jakarta.io
	private static final long serialVersionUID = 1L;//controle de versão , para as 
	//classes que forem serializadas 
	@Id //jakarta persistence
	@GeneratedValue(strategy=GenerationType.Auto) //jakarta persistence
	private UUID idProduct; //java util uuid são universais e não sequenciais em arquiteturas
	//distribuidas de microservices, identificadores distribuidos evita muitos conflitas
	private String name;
	private BigDecimal value; //java.math
	
	public UUID getIdProduct() {
		return idProduct;
	}
	
	public UUID setIdProduct(UUID idProduct) {
		this.idProduct = idProduct;
	}
	
	public String  getName() {
		return name;
	}
	
	public String setName(String name) {
		this.name = name;
	}
	
	public BigDecimal getValue() {
		return value;
	}
	
	public BigDecimal setValue(BigDecimal value) {
		this.value = value;
	}
}

//repositories interface do JPA diversos métodos prontos sem precisar implementar cada
//um deles 
//47
import com.example.springboot.models.ProductModel;
import java.util.UUID;
@Repository
public interface ProductRepository extends JpaRepository<ProductModel, UUID> {
	
	
	
	
}

//beans - determinada classe é um bean , 
//@Component bean generico gerenciado por ele
//@Service - Classe de serviço regra de negócio
//@Controller gerenciada por ele mas pode ter endpoints 
